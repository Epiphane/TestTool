plugins {
   id 'com.github.johnrengelman.shadow' version '1.2.2'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'application'

repositories {
    mavenCentral()

    maven {
        url 'https://hibernate-sqlite.googlecode.com/svn/trunk/mavenrepo'
    }
}

dependencies {
    compile 'org.projectlombok:lombok:1.16.6'
    compile 'com.google.guava:guava:12.0'
    compile 'org.xerial:sqlite-jdbc:3.7.2'
    compile 'org.slf4j:slf4j-api:1.6.0'
    compile 'ch.qos.logback:logback-classic:1.1.3'
    compile 'org.hibernate:hibernate-core:5.0.2.Final'
    compile 'org.hibernate:hibernate-annotations:3.5.6-Final'
    compile fileTree(dir: "$projectDir/libs/compile", include: '*.jar')

    testCompile fileTree(dir: "$projectDir/libs/testCompile", include: '*.jar')
    runtime 'org.codehaus.groovy:groovy-all:2.4.5'
}

sourceSets {
    main {
        resources {
            srcDir 'src/main/layout'
        }
    }

    test {
       java {
          srcDir "$projectDir/../testing/src/test/java"
       }
       resources {
          srcDir "$projectDir/../testing/src/test/resources"
       }
    }
}

mainClassName = 'com.teampc.TestToolMain'

// stolen from: http://stackoverflow.com/questions/24997441/delombok-using-gradle
task delombok {
    def outputDir = "$buildDir/src-delomboked"

    inputs.files sourceSets.main.java
    outputs.dir file(outputDir)

    doLast {
        description 'Delomboks the source code'
        ant.taskdef(classname: 'lombok.delombok.ant.Tasks$Delombok', classpath: configurations.compile.asPath, name: 'delombok')
        ant.mkdir(dir: outputDir)
        ant.delombok(to: outputDir, from: 'src/main/java', classpath: configurations.compile.asPath)
    }
}

task compileDelombok(type: JavaCompile, dependsOn: delombok) {
    def outputDir = "${buildDir}/classes-delomboked/main"
    def sourceFiles = delombok.outputs.files

    inputs.files sourceFiles
    outputs.dir file(outputDir)

    source = sourceFiles
    destinationDir = file(outputDir)
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
    dependencyCacheDir = file("${buildDir}/dependency-cache")
    classpath = files(outputDir, configurations.compile.asPath)
}

javadoc {
    dependsOn compileDelombok
    source = delombok.outputs.files
    failOnError = false
    excludes = ['**/*.html']
}

if (JavaVersion.current().isJava8Compatible()) {
  allprojects {
    tasks.withType(Javadoc) {
      options.addStringOption('Xdoclint:none', '-quiet')
    }
  }
}

test {
   testLogging {
      exceptionFormat = 'full'
      events 'started', 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
   }
}

tasks.withType(JavaCompile) {
   sourceCompatibility = '1.8'
   targetCompatibility = '1.8'
//   options.compilerArgs << '-Xlint:all'
}

task copyJar(dependsOn: shadowJar, type: Copy) {
    from shadowJar.outputs.files.asPath
    into "$projectDir/executables/"
}

task copyJavadoc(dependsOn: javadoc, type: Copy) {
    from javadoc.outputs.files.asPath
    into "$projectDir/../documentation"
}

task release(dependsOn: ['copyJar', 'copyJavadoc'])

def createSpestTask(isValidate) {
   def dependent = createRunSpestTask isValidate
   tasks.create("${isValidate ? 'validate' : 'generate'}Spest") {
      dependsOn dependent
      copy {
         from './resources/tmp'
         into sourceSets.test.resources.srcDirs.last()
      }

      delete('./resources')
   }
}

def hasSpest(file) {
   def hasSpest = false
   file.eachLine {
      if (!hasSpest && it =~ /^\s*(pre|post):/) {
         hasSpest = true;
      }
   }
   hasSpest
}

def createRunSpestTask(isValidate) {
   tasks.create("run${isValidate ? 'Validate' : 'Generate'}Spest", JavaExec) {
      dependsOn compileJava
      classpath = files("$projectDir/libs/testCompile/spest-patched.jar")
      main = 'controller.Launcher'
      def tempArgs = ['-s', '.',  '-t', "${sourceSets.test.java.srcDirs.last()}", "${isValidate ? '-v' : '-g'}", '-l', 'WARN']
      def files
      if (project.hasProperty('spestFiles')) {
         files = spestFiles.tokenize(',').collect{ new File(it.trim()) }
      } else {
         files = sourceSets.main.java.files
      }

      files.findAll(this.&hasSpest).each {
         tempArgs << it.path
      }

      args = tempArgs
   }
}

createSpestTask true
createSpestTask false

task findSpest << {
   sourceSets.main.java.files.findAll(this.&hasSpest).each {
      println it
   }
}
